# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
install.packages("rdgal")
install.packages("rgdal")
shiny::runApp('D:/R Studio/shinyfirst/demo/intelligentsia-master')
install.packages("IMWatson")
runApp('D:/R Studio/shinyfirst/demo')
if(interactive()){
library(IMWatson)
ShinyChatbot(api_key = your_api_key,
workspace = your_workspace)
}
#' @export
#' @rdname chatbot
#'
chatbot <- function(input, output, session, api_key, workspace, rv.chat=FALSE){
chatbot <- function(input, output, session, api_key, workspace, rv.chat=FALSE){
if(!is.list(rv.chat)){
bot <- IMWatson::watson_chat_factory$new(api_key, workspace)
rv.chat <- shiny::reactiveValues(text = bot$text,
show.chat = FALSE,
context = bot$context,
bot = bot)
shiny::observeEvent(input$send, {
bot$answer(text = input$message_field)
rv.chat$text <- shiny::HTML(paste(bot$text, collapse = '<br/>'))
rv.chat$context <- bot$context
shiny::updateTextInput(session, inputId = "message_field", value = "")
})
shiny::observeEvent(input$chatButton, ({
rv.chat$show.chat <- !(rv.chat$show.chat)
}))
}
shiny::observe({
output$chat <- shiny::renderUI({ shiny::HTML(rv.chat$text) })
})
install.packages("telegram.bot")
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
library(telegram.bot)
runApp('D:/R Studio/shinyfirst/demo/ShinyChat-master')
runApp('D:/R Studio/shinyfirst/demo/ShinyChat-master')
runApp('D:/R Studio/shinyfirst/demo/ShinyChat-master')
getwd()
setwd("D:/R Studio/shinyfirst")
shiny::runApp('readme/COVID-19-Statistical-Analysis-Simulator-master')
